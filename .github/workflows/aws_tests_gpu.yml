# Compile and test project on an AWS instance
name: AWS Cuda tests

on:
  pull_request:
    types: [ labeled ]
    branches: 
      - main

jobs:
  start-runner:
    if: "contains(github.event.label.name, 'aws_gpu')"
    name: Start EC2 runner
    runs-on: ubuntu-20.04
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_KEY }}
          aws-region: us-east-1
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2.2.0
        with:
          mode: start
          github-token: ${{ secrets.CONCRETE_ACTIONS_TOKEN }}
          ec2-image-id: ami-0df0337664ad627fe
          ec2-instance-type: p3.2xlarge
          subnet-id: subnet-8123c9e7
          security-group-id: sg-0466d33ced960ba35
          
  run-cuda-tests-linux:
    concurrency:
      group: ${{ github.head_ref }}
      cancel-in-progress: true
    name: Test code in EC2
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 20.04 supports CUDA 11.0+ (gcc >= 5 && gcc <= 10). SM < 52 deprecated since 11.0
          - os: ubuntu-20.04
            cuda: "11.3"
            cuda_arch: "70"
            gcc: 8
    env:
      CUDA_PATH: /usr/local/cuda-${{ matrix.cuda }}

    steps:
    - uses: actions/checkout@v2
    - name: Export CUDA variables
      if: ${{ !cancelled() }}
      run: |
        echo "CUDA_PATH=$CUDA_PATH" >> $GITHUB_ENV
        echo "$CUDA_PATH/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=$CUDA_PATH/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    # Specify the correct host compilers
    - name: Export gcc and g++ variables
      if: ${{ !cancelled() }}
      run: |
        echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CUDACXX=/usr/local/cuda-${{ matrix.cuda }}/bin/nvcc" >> $GITHUB_ENV
        echo "HOME=/home/ubuntu" >> $GITHUB_ENV
    - name: Install Rust
      if: ${{ !cancelled() }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        components: rustfmt, clippy
    - name: Test concrete-cuda
      if: ${{ !cancelled() }}
      run: |
        cargo test --release -p concrete-cuda
    - name: Run concrete tests
      if: ${{ !cancelled() }}
      run: |
        RUSTFLAGS="-Ctarget-cpu=native" cargo test --release --no-fail-fast --features=backend_cuda -p concrete-core-test -- --test-threads 1
  stop-runner:
    name: Stop EC2 runner
    needs:
      - start-runner
      - run-cuda-tests-linux
    runs-on: ubuntu-20.04
    if: ${{ always() }} 
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_KEY }}
          aws-region: us-east-1
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2.2.0
        with:
          mode: stop
          github-token: ${{ secrets.CONCRETE_ACTIONS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
      
  remove_label:
    name: Remove aws_gpu label
    runs-on: ubuntu-latest
    needs:
      - start-runner
      - run-cuda-tests-linux
      - stop-runner
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: aws_gpu
          github_token: ${{ secrets.GITHUB_TOKEN }}
